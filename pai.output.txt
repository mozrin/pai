Flutter/Dart
Do not put comments in my code



We are going to hard code the first screen of the zork 1 adventure and then create a way to take input from the user.


--- Folder Structure ---



/home/mozrin/Code/odyssey/.pai/../assets/
├── adventures/
│   └── zork_1/
└── languages/

4 directories, 0 files
/home/mozrin/Code/odyssey/.pai/../lib/
├── everything.dart
├── main.dart
├── screens/
│   ├── five/
│   │   └── five_screen.dart
│   ├── four/
│   │   └── four_screen.dart
│   ├── landing/
│   │   └── landing_screen.dart
│   ├── model_screen.dart
│   ├── orchestrator.dart
│   ├── play/
│   │   └── play_screen.dart
│   ├── primary_screen.dart
│   ├── screens.dart
│   ├── three/
│   │   └── three_screen.dart
│   └── two/
│       └── two_screen.dart
├── services/
│   ├── ApiService/
│   │   ├── api_service.dart
│   │   └── endpoints/
│   │       ├── endpoints.dart
│   │       └── endpoint_welcome.dart
│   ├── ConfigurationService/
│   │   ├── configuration.dart
│   │   └── configuration_service.dart
│   ├── LocalizationService/
│   │   ├── localization.dart
│   │   └── localization_service.dart
│   ├── SequenceDetectorService/
│   │   ├── initialize_sequence_detection.dart
│   │   ├── sequence_detector.dart
│   │   ├── sequence_detector_service.dart
│   │   └── sequences/
│   │       ├── sequence_0123444.dart
│   │       └── sequences.dart
│   └── services.dart
├── startup/
│   ├── initialize_platform_environment.dart
│   ├── load_asset_configuration.dart
│   ├── load_device_data.dart
│   ├── load_localization_data.dart
│   ├── load_runtime_data.dart
│   ├── load_theme_data.dart
│   ├── load_welcome_endpoint_data.dart
│   ├── splash_screen.dart
│   ├── startup.dart
│   └── startup_process.dart
├── state_machine/
│   ├── app_effects.dart
│   ├── app_events.dart
│   ├── app_state_machine.dart
│   ├── app_states.dart
│   ├── app_transitions.dart
│   └── state_machine.dart
├── utilities/
│   ├── moztopia/
│   │   ├── mozPrint/
│   │   │   └── moz_print.dart
│   │   └── moztopia.dart
│   └── utilities.dart
└── widgets/
    ├── dialogs/
    │   ├── dialog_base_widget.dart
    │   ├── dialogs.dart
    │   ├── ok/
    │   │   └── dialog_modal_ok.dart
    │   └── yes_or_no/
    │       └── dialog_modal_yes_no.dart
    ├── navigation/
    │   ├── footer/
    │   │   └── footer_navigation.dart
    │   ├── header/
    │   │   ├── header_language_selector.dart
    │   │   └── header_navigation.dart
    │   └── navigation.dart
    └── widgets.dart

27 directories, 53 files



--- Baseline File Contents ---



# /home/mozrin/Code/odyssey/.pai/../assets/adventures/zork_1/gameplay.json # NOT PART OF CODE DON'T ECHO IT EVER #
{
"game_data": {
"title": "Zork I: The Great Underground Empire",
"developer": "Infocom",
"year_released": 1980,
"starting_location_id": "west_of_house",
"max_score": 350,
"notes": "This JSON represents the static, initial state of Zork I's world. It does not include dynamic game logic, specific puzzle solutions, or complex AI behavior beyond basic descriptions. For example, the Thief's movement or the Troll's blocking are noted but not simulated within this data structure. Descriptions are simplified where dynamic elements might change them in-game."
},
"rooms": [
{
"id": "west_of_house",
"name": "West of House",
"description": "You are standing in an open field west of a white house, with a boarded front door. A path leads to the north. There is a small mailbox here.",
"exits": {
"north": "north_of_house",
"east": "white_house"
},
"initial_items": [
"mailbox"
]
},
{
"id": "north_of_house",
"name": "North of House",
"description": "You are facing the north side of a white house. There is no door here, and all the windows are boarded shut. To the north a narrow path winds through the trees.",
"exits": {
"south": "west_of_house",
"north": "forest_path"
},
"initial_items": []
},
{
"id": "south_of_house",
"name": "South of House",
"description": "You are facing the south side of a white house. There is no door here, and all the windows are boarded shut.",
"exits": {
"north": "white_house"
},
"initial_items": []
},
{
"id": "east_of_house",
"name": "East of House",
"description": "You are behind the white house. A path leads into the forest to the east. In one corner of the house there is a small window which is slightly ajar.",
"exits": {
"west": "white_house",
"east": "forest_path_east",
"in": "kitchen"
},
"initial_items": []
},
{
"id": "white_house",
"name": "White House",
"description": "This is a white house. You are at the front door, which is boarded shut.",
"exits": {
"west": "west_of_house",
"north": "north_of_house",
"south": "south_of_house",
"east": "east_of_house"
},
"initial_items": []
},
{
"id": "kitchen",
"name": "Kitchen",
"description": "You are in the kitchen of the white house. A table seems to have been used recently for the preparation of food. A passage leads to the west, and a dark staircase can be seen leading up into the attic. A bottle is on the table. The black book is on the table. A bag is on the table.",
"exits": {
"west": "living_room",
"up": "attic",
"out": "east_of_house"
},
"initial_items": [
"bottle",
"black_book",
"bag"
]
},
{
"id": "attic",
"name": "Attic",
"description": "This is the attic. The only exit is a dark staircase leading down. The dusty old trunk is here.",
"exits": {
"down": "kitchen"
},
"initial_items": [
"trunk"
]
},
{
"id": "living_room",
"name": "Living Room",
"description": "You are in the living room. There is a convenient exit to the east. A sword, a lamp, and a valuable painting are on the floor. A rug is spread out on the floor.",
"exits": {
"east": "kitchen",
"west": "dining_room",
"down": "cellar"
},
"initial_items": [
"sword",
"brass_lantern",
"painting",
"rug"
]
},
{
"id": "dining_room",
"name": "Dining Room",
"description": "This is the dining room. There is a large table and chairs here. An ornate antique mirror hangs on the wall.",
"exits": {
"east": "living_room",
"south": "cellar"
},
"initial_items": [
"mirror"
]
},
{
"id": "cellar",
"name": "Cellar",
"description": "This is the cellar. There is a workbench here, and a tool box on the bench. The main exit is a wooden door to the north. A dark, narrow passage leads out to the west.",
"exits": {
"up": "living_room",
"west": "dark_passage"
},
"initial_items": [
"tool_box"
]
},
{
"id": "dark_passage",
"name": "Dark Passage",
"description": "This is a dark, narrow passage. It is too dark to see anything without a light source.",
"exits": {
"east": "cellar",
"west": "troll_room"
},
"initial_items": [],
"requires_light": true
},
{
"id": "troll_room",
"name": "Troll Room",
"description": "This is a small room, whose only exit is a passage to the east. A nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room.",
"exits": {
"east": "dark_passage",
"west": "east_of_chasm"
},
"initial_items": [
"troll"
],
"blockage": {
"by": "troll",
"direction": [
"east",
"west"
],
"condition": "alive"
}
},
{
"id": "east_of_chasm",
"name": "East of Chasm",
"description": "You are on the east edge of a great chasm, which runs north-south and seems to be about 50 feet across. A rope bridge spans the chasm to the west.",
"exits": {
"east": "troll_room",
"west": "west_of_chasm"
},
"initial_items": [
"rope_bridge"
]
},
{
"id": "west_of_chasm",
"name": "West of Chasm",
"description": "You are on the west edge of a great chasm. A rope bridge spans the chasm to the east.",
"exits": {
"east": "east_of_chasm",
"south": "reservoir_south",
"north": "reservoir_north"
},
"initial_items": []
},
{
"id": "reservoir_south",
"name": "South of Reservoir",
"description": "You are in a large cavern, with a shallow, tranquil reservoir filling the entire space. Passages lead north and east.",
"exits": {
"north": "reservoir_north",
"east": "west_of_chasm"
},
"initial_items": []
},
{
"id": "reservoir_north",
"name": "North of Reservoir",
"description": "You are in a large cavern, with a shallow, tranquil reservoir filling the entire space. Passages lead south and west.",
"exits": {
"south": "reservoir_south",
"west": "dam_lobby"
},
"initial_items": []
},
{
"id": "dam_lobby",
"name": "Dam Lobby",
"description": "This is the lobby of the Great Underground Dam. The dam itself is to the west. Passages lead east and north.",
"exits": {
"east": "reservoir_north",
"west": "dam",
"north": "flat_rock_room"
},
"initial_items": [
"dam_control_panel"
]
},
{
"id": "dam",
"name": "Dam",
"description": "You are on the great dam. The mighty flow of the water can be seen through the grating, and a large door to the west leads into the Dam control room.",
"exits": {
"east": "dam_lobby",
"west": "dam_control_room"
},
"initial_items": []
},
{
"id": "dam_control_room",
"name": "Dam Control Room",
"description": "This is the Dam Control Room. There are large levers here, controlling the sluice gates.",
"exits": {
"east": "dam"
},
"initial_items": [
"large_levers"
]
},
{
"id": "flat_rock_room",
"name": "Flat Rock Room",
"description": "You are in a small room with a flat rock. There is a passage to the south.",
"exits": {
"south": "dam_lobby",
"east": "circular_room"
},
"initial_items": [
"flat_rock"
]
},
{
"id": "circular_room",
"name": "Circular Room",
"description": "This is a circular room with passages leading in all directions. A strange glowing object is on the floor.",
"exits": {
"north": "round_room",
"south": "round_room",
"east": "round_room",
"west": "flat_rock_room",
"up": "round_room",
"down": "round_room"
},
"initial_items": [
"glowing_object"
]
},
{
"id": "round_room",
"name": "Round Room",
"description": "This is a round room with passages leading in all directions. A low humming sound emanates from here.",
"exits": {
"north": "circular_room",
"south": "circular_room",
"east": "circular_room",
"west": "circular_room",
"up": "circular_room",
"down": "circular_room"
},
"initial_items": [
"invisible_maze_exit"
]
},
{
"id": "torch_room",
"name": "Torch Room",
"description": "This is a small room. The walls are covered with hundreds of torches, all burning brightly. The only exit is south.",
"exits": {
"south": "round_room"
},
"initial_items": [
"torch"
]
},
{
"id": "entrance_to_hades",
"name": "Entrance to Hades",
"description": "You are at the entrance to Hades. There is a flickering light far below. A narrow passage leads back north.",
"exits": {
"north": "dark_passage",
"down": "hades"
},
"initial_items": []
},
{
"id": "hades",
"name": "Hades",
"description": "You are in Hades. The air here is oppressive and heavy. To the south is a glimmering light, and a narrow passage leads up to the Entrance to Hades.",
"exits": {
"up": "entrance_to_hades",
"south": "fireplace"
},
"initial_items": []
},
{
"id": "fireplace",
"name": "Fireplace",
"description": "You are in a large fireplace, with a narrow passage to the north.",
"exits": {
"north": "hades",
"south": "coal_mine"
},
"initial_items": []
},
{
"id": "coal_mine",
"name": "Coal Mine",
"description": "This is a vast coal mine. Tracks lead off into the darkness to the north and east. A large pile of coal is here.",
"exits": {
"north": "fireplace",
"east": "coal_mine_east"
},
"initial_items": [
"coal"
]
},
{
"id": "coal_mine_east",
"name": "Coal Mine (East)",
"description": "You are in another section of the coal mine. Tracks continue east.",
"exits": {
"west": "coal_mine",
"east": "smelly_room"
},
"initial_items": []
},
{
"id": "smelly_room",
"name": "Smelly Room",
"description": "This is a small room with a distinct odor of ozone. A passage leads west.",
"exits": {
"west": "coal_mine_east",
"south": "gas_room"
},
"initial_items": []
},
{
"id": "gas_room",
"name": "Gas Room",
"description": "This room is filled with a green, noxious gas. There is a narrow passage to the north.",
"exits": {
"north": "smelly_room",
"west": "maze_of_twisty_passages"
},
"initial_items": []
},
{
"id": "maze_of_twisty_passages",
"name": "Maze of Twisty Passages",
"description": "It is a maze of twisty little passages, all alike.",
"exits": {
"north": "maze_of_twisty_passages",
"south": "maze_of_twisty_passages",
"east": "maze_of_twisty_passages",
"west": "maze_of_twisty_passages",
"up": "maze_of_twisty_passages",
"down": "maze_of_twisty_passages"
},
"initial_items": [],
"properties": {
"maze": true
}
},
{
"id": "fissure",
"name": "Fissure",
"description": "You are in a great fissure, which runs north-south. A narrow passage leads east.",
"exits": {
"east": "top_of_tree"
},
"initial_items": []
},
{
"id": "top_of_tree",
"name": "Top of Tree",
"description": "You are at the top of a giant tree. You can see the white house in the distance.",
"exits": {
"down": "ground",
"west": "fissure"
},
"initial_items": [
"bird_egg"
]
},
{
"id": "ground",
"name": "Ground",
"description": "You are on the ground, at the base of a gigantic tree.",
"exits": {
"up": "top_of_tree"
},
"initial_items": []
},
{
"id": "forest_path",
"name": "Forest Path",
"description": "This is a narrow path winding through the trees.",
"exits": {
"south": "north_of_house",
"east": "forest_path_east",
"west": "forest_path_west"
},
"initial_items": []
},
{
"id": "forest_path_east",
"name": "Forest Path",
"description": "This is a narrow path winding through the trees. You can see the white house to the west.",
"exits": {
"west": "forest_path",
"south": "east_of_house",
"east": "grating_room"
},
"initial_items": []
},
{
"id": "forest_path_west",
"name": "Forest Path",
"description": "This is a narrow path winding through the trees. You can see the white house to the east.",
"exits": {
"east": "forest_path",
"west": "clearing"
},
"initial_items": []
},
{
"id": "clearing",
"name": "Clearing",
"description": "You are in a clearing. A large sign reads 'ZORK is fun'. A passage leads east.",
"exits": {
"east": "forest_path_west"
},
"initial_items": [
"sign"
]
},
{
"id": "grating_room",
"name": "Grating Room",
"description": "You are in a small room with a solid grating in the floor. A rusty, brown padlock is here.",
"exits": {
"west": "forest_path_east",
"down": "grating_room_below"
},
"initial_items": [
"rusty_padlock"
],
"secret_exit_condition": "grating_open"
},
{
"id": "grating_room_below",
"name": "Below Grating",
"description": "You are in a small chamber. The grating above is visible. A dark passage leads to the west.",
"exits": {
"up": "grating_room",
"west": "coal_mine"
},
"initial_items": []
},
{
"id": "chasm_north",
"name": "North of Chasm",
"description": "You are on the north side of the great chasm. A narrow passage leads north, and a rope bridge spans the chasm to the south.",
"exits": {
"south": "chasm_south",
"north": "cavern"
},
"initial_items": []
},
{
"id": "chasm_south",
"name": "South of Chasm",
"description": "You are on the south side of the great chasm. A rope bridge spans the chasm to the north.",
"exits": {
"north": "chasm_north"
},
"initial_items": []
},
{
"id": "cavern",
"name": "Cavern",
"description": "This is a large cavern. A passage leads south to the chasm. To the east is a small opening, and a narrow crack leads north.",
"exits": {
"south": "chasm_north",
"east": "crack",
"north": "secret_passage"
},
"initial_items": []
},
{
"id": "crack",
"name": "Crack",
"description": "This is a narrow crack in the rock. It leads west into the cavern.",
"exits": {
"west": "cavern",
"east": "vault"
},
"initial_items": []
},
{
"id": "vault",
"name": "Vault",
"description": "This is a small, dusty vault. The walls are covered with cobwebs. A passage leads west.",
"exits": {
"west": "crack"
},
"initial_items": [
"platinum_bar"
]
},
{
"id": "secret_passage",
"name": "Secret Passage",
"description": "You are in a secret passage. It opens out into a larger cavern to the south.",
"exits": {
"south": "cavern",
"north": "large_cavern"
},
"initial_items": []
},
{
"id": "large_cavern",
"name": "Large Cavern",
"description": "You are in a large cavern. A passage leads south into a secret passage.",
"exits": {
"south": "secret_passage",
"north": "crypt"
},
"initial_items": []
},
{
"id": "crypt",
"name": "Crypt",
"description": "You are in an ancient crypt. Skeletons lie scattered about. A passage leads south.",
"exits": {
"south": "large_cavern",
"north": "treasury"
},
"initial_items": [
"coffin"
]
},
{
"id": "treasury",
"name": "Treasury",
"description": "You are in the Treasury of Zork! All around you are piles of gleaming treasure.",
"exits": {
"south": "crypt"
},
"initial_items": [
"crown",
"scepter",
"jeweled_fountain",
"royal_ring",
"golden_casket"
]
},
{
"id": "mirror_room",
"name": "Mirror Room",
"description": "You are in a room whose walls are covered with mirrors. A large mirror portal is on the west wall.",
"exits": {
"east": "dining_room",
"west": "another_mirror_room"
},
"initial_items": []
},
{
"id": "another_mirror_room",
"name": "Mirror Room",
"description": "You are in a room whose walls are covered with mirrors. A large mirror portal is on the east wall.",
"exits": {
"east": "mirror_room",
"west": "jewel_room"
},
"initial_items": []
},
{
"id": "jewel_room",
"name": "Jewel Room",
"description": "You are in a small room, filled with gems and jewels. A passage leads east.",
"exits": {
"east": "another_mirror_room"
},
"initial_items": [
"jewels"
]
},
{
"id": "loud_room",
"name": "Loud Room",
"description": "You are in a large, echoing room. A deafening roar comes from the west. A passage leads east.",
"exits": {
"east": "dam_control_room",
"west": "noisy_room"
},
"initial_items": []
},
{
"id": "noisy_room",
"name": "Noisy Room",
"description": "This room is filled with a deafening roar. A passage leads east.",
"exits": {
"east": "loud_room"
},
"initial_items": []
},
{
"id": "breezy_room",
"name": "Breezy Room",
"description": "You are in a large cavern, with a strong breeze blowing from the west. A passage leads east.",
"exits": {
"east": "noisy_room",
"west": "egress"
},
"initial_items": []
},
{
"id": "egress",
"name": "Egress",
"description": "You are at the top of a deep shaft. A strong breeze blows from the east.",
"exits": {
"east": "breezy_room",
"down": "bottom_of_shaft"
},
"initial_items": []
},
{
"id": "bottom_of_shaft",
"name": "Bottom of Shaft",
"description": "You are at the bottom of a deep shaft. A strong breeze blows from the east.",
"exits": {
"up": "egress",
"west": "dark_cave"
},
"initial_items": []
},
{
"id": "dark_cave",
"name": "Dark Cave",
"description": "This is a dark cave. It is too dark to see anything without a light source.",
"exits": {
"east": "bottom_of_shaft",
"north": "great_underground_lake"
},
"initial_items": [],
"requires_light": true
},
{
"id": "great_underground_lake",
"name": "Great Underground Lake",
"description": "You are on the shore of a vast underground lake. The water is dark and still. A passage leads south.",
"exits": {
"south": "dark_cave",
"swim_north": "shore_north",
"swim_east": "shore_east",
"swim_west": "shore_west"
},
"initial_items": []
},
{
"id": "shore_north",
"name": "North Shore",
"description": "You are on the north shore of the Great Underground Lake.",
"exits": {
"south": "great_underground_lake",
"north": "grate"
},
"initial_items": []
},
{
"id": "grate",
"name": "Grate",
"description": "You are at a large, rusty grate. It is firmly locked.",
"exits": {
"south": "shore_north"
},
"initial_items": [
"rusty_grate"
]
},
{
"id": "shore_east",
"name": "East Shore",
"description": "You are on the east shore of the Great Underground Lake.",
"exits": {
"west": "great_underground_lake",
"east": "dam_base"
},
"initial_items": []
},
{
"id": "dam_base",
"name": "Base of Dam",
"description": "You are at the base of the Dam. The water here is deep and dark.",
"exits": {
"west": "shore_east"
},
"initial_items": []
},
{
"id": "shore_west",
"name": "West Shore",
"description": "You are on the west shore of the Great Underground Lake.",
"exits": {
"east": "great_underground_lake"
},
"initial_items": []
},
{
"id": "residence_of_the_ancient_one",
"name": "Residence of the Ancient One",
"description": "You are in a large, silent chamber. The air is still. A massive, ancient stone coffin is here.",
"exits": {
"north": "dam_control_room_secret"
},
"initial_items": [
"ancient_coffin"
],
"secret_entrance_from": "loud_room_water_drained"
},
{
"id": "dam_control_room_secret",
"name": "Dam Control Room (Secret Entrance)",
"description": "You are in a hidden part of the Dam Control Room.",
"exits": {
"south": "residence_of_the_ancient_one",
"east": "dam_control_room"
},
"initial_items": []
}
],
"items": [
{
"id": "mailbox",
"name": "small mailbox",
"description": "A small mailbox. It is currently closed.",
"initial_location": "west_of_house",
"type": "container",
"properties": {
"can_take": false,
"is_openable": true,
"is_open": false,
"initial_contents": [
"leaflet"
]
}
},
{
"id": "leaflet",
"name": "leaflet",
"description": "WELCOME TO ZORK! Your first adventure here has just begun...",
"initial_location": "mailbox",
"type": "document",
"properties": {
"can_take": true,
"can_be_read": true
}
},
{
"id": "sword",
"name": "sword",
"description": "A trusty elvish sword.",
"initial_location": "living_room",
"type": "weapon",
"properties": {
"can_take": true,
"damage": "high",
"effectiveness_vs": [
"troll",
"thief"
]
}
},
{
"id": "brass_lantern",
"name": "brass lantern",
"description": "A bright brass lantern, currently unlit.",
"initial_location": "living_room",
"type": "light_source",
"properties": {
"can_take": true,
"is_light_source": true,
"is_lit": false,
"fuel_duration": "finite",
"fuel_type": "oil"
}
},
{
"id": "painting",
"name": "valuable painting",
"description": "A valuable painting, worth a fortune.",
"initial_location": "living_room",
"type": "treasure",
"properties": {
"can_take": true,
"score_value": 4
}
},
{
"id": "rug",
"name": "rug",
"description": "A large, Persian rug, spread out on the floor.",
"initial_location": "living_room",
"type": "furniture",
"properties": {
"can_take": false,
"can_be_moved": true,
"hides_secret": "trap_door"
}
},
{
"id": "bottle",
"name": "bottle",
"description": "A glass bottle. It is currently empty.",
"initial_location": "kitchen",
"type": "container",
"properties": {
"can_take": true,
"is_openable": true,
"is_open": false,
"initial_contents": []
}
},
{
"id": "black_book",
"name": "black book",
"description": "A black book with a strange cover.",
"initial_location": "kitchen",
"type": "document",
"properties": {
"can_take": true,
"can_be_read": true,
"secret_info": "Contains clues for the white house puzzle"
}
},
{
"id": "bag",
"name": "brown bag",
"description": "A small brown bag.",
"initial_location": "kitchen",
"type": "container",
"properties": {
"can_take": true,
"is_openable": true,
"is_open": false,
"initial_contents": [
"garlic"
]
}
},
{
"id": "garlic",
"name": "garlic",
"description": "A clove of garlic.",
"initial_location": "bag",
"type": "misc",
"properties": {
"can_take": true,
"effect": "repels_vampires (not relevant in Zork I)"
}
},
{
"id": "trunk",
"name": "dusty old trunk",
"description": "A dusty old trunk. It is currently closed.",
"initial_location": "attic",
"type": "container",
"properties": {
"can_take": false,
"is_openable": true,
"is_open": false,
"initial_contents": [
"skeleton_key"
]
}
},
{
"id": "skeleton_key",
"name": "skeleton key",
"description": "A skeleton key. It looks like it could open many things.",
"initial_location": "trunk",
"type": "key",
"properties": {
"can_take": true,
"unlocks": [
"grating_padlock"
]
}
},
{
"id": "mirror",
"name": "antique mirror",
"description": "An ornate antique mirror. It seems to reflect something beyond its surface.",
"initial_location": "dining_room",
"type": "portal",
"properties": {
"can_take": false,
"is_portal": true,
"leads_to": "mirror_room",
"requires_action": "ENTER"
}
},
{
"id": "tool_box",
"name": "tool box",
"description": "A small metal tool box. It is currently closed.",
"initial_location": "cellar",
"type": "container",
"properties": {
"can_take": true,
"is_openable": true,
"is_open": false,
"initial_contents": [
"wrench",
"screwdriver"
]
}
},
{
"id": "wrench",
"name": "wrench",
"description": "A heavy wrench.",
"initial_location": "tool_box",
"type": "tool",
"properties": {
"can_take": true
}
},
{
"id": "screwdriver",
"name": "screwdriver",
"description": "A small screwdriver.",
"initial_location": "tool_box",
"type": "tool",
"properties": {
"can_take": true
}
},
{
"id": "rusty_padlock",
"name": "rusty, brown padlock",
"description": "A rusty, brown padlock. It is firmly locked.",
"initial_location": "grating_room",
"type": "lock",
"properties": {
"can_take": false,
"is_locked": true,
"key_required": "skeleton_key",
"secures_item": "grating"
}
},
{
"id": "rusty_grate",
"name": "rusty grate",
"description": "A large, rusty grate, firmly locked.",
"initial_location": "grate",
"type": "lock",
"properties": {
"can_take": false,
"is_locked": true,
"key_required": "skeleton_key",
"secures_item": "water_control_grate"
}
},
{
"id": "rope_bridge",
"name": "rope bridge",
"description": "A rickety rope bridge spanning the chasm.",
"initial_location": "east_of_chasm",
"type": "structure",
"properties": {
"can_take": false,
"is_breakable": true,
"break_condition": "carrying too many items"
}
},
{
"id": "dam_control_panel",
"name": "dam control panel",
"description": "A control panel for the Dam. It has many buttons and levers.",
"initial_location": "dam_lobby",
"type": "control_panel",
"properties": {
"can_take": false,
"interactable": true,
"controls": "dam_operation"
}
},
{
"id": "large_levers",
"name": "large levers",
"description": "Large levers for controlling the sluice gates of the Dam.",
"initial_location": "dam_control_room",
"type": "control_mechanism",
"properties": {
"can_take": false,
"interactable": true,
"controls": "sluice_gates",
"effect_on_water": "lowers/raises water level"
}
},
{
"id": "flat_rock",
"name": "flat rock",
"description": "A flat rock. It seems to be part of the floor.",
"initial_location": "flat_rock_room",
"type": "misc",
"properties": {
"can_take": false,
"hides_secret": "hidden_chamber_under_rock"
}
},
{
"id": "glowing_object",
"name": "glowing object",
"description": "A strange glowing object.",
"initial_location": "circular_room",
"type": "light_source",
"properties": {
"can_take": true,
"is_light_source": true,
"is_lit": true,
"fuel_duration": "infinite"
}
},
{
"id": "invisible_maze_exit",
"name": "invisible wall",
"description": "There is an invisible wall here.",
"initial_location": "round_room",
"type": "obstacle",
"properties": {
"can_take": false,
"is_invisible": true,
"solution": "mapping the maze"
}
},
{
"id": "torch",
"name": "torch",
"description": "A brightly burning torch.",
"initial_location": "torch_room",
"type": "light_source",
"properties": {
"can_take": true,
"is_light_source": true,
"is_lit": true,
"fuel_duration": "finite"
}
},
{
"id": "coal",
"name": "large pile of coal",
"description": "A large pile of coal. It could be used as fuel.",
"initial_location": "coal_mine",
"type": "fuel",
"properties": {
"can_take": true,
"fuel_type": "coal"
}
},
{
"id": "sign",
"name": "large sign",
"description": "The sign reads: 'ZORK is fun'.",
"initial_location": "clearing",
"type": "document",
"properties": {
"can_take": false,
"can_be_read": true
}
},
{
"id": "bird_egg",
"name": "bird's egg",
"description": "A fragile bird's egg.",
"initial_location": "top_of_tree",
"type": "treasure",
"properties": {
"can_take": true,
"score_value": 5,
"fragile": true
}
},
{
"id": "coffin",
"name": "ancient stone coffin",
"description": "A massive, ancient stone coffin. It is currently closed.",
"initial_location": "crypt",
"type": "container",
"properties": {
"can_take": false,
"is_openable": true,
"is_open": false,
"initial_contents": [
"sarcophagus_contents"
]
}
},
{
"id": "ancient_coffin",
"name": "ancient stone coffin",
"description": "A massive, ancient stone coffin. It is currently closed.",
"initial_location": "residence_of_the_ancient_one",
"type": "container",
"properties": {
"can_take": false,
"is_openable": true,
"is_open": false,
"initial_contents": [
"ancient_talisman"
]
}
},
{
"id": "ancient_talisman",
"name": "ancient talisman",
"description": "A very old, intricately carved talisman.",
"initial_location": "ancient_coffin",
"type": "treasure",
"properties": {
"can_take": true,
"score_value": 25
}
}
],
"npcs": [
{
"id": "troll",
"name": "troll",
"description": "A nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room.",
"initial_location": "troll_room",
"type": "hostile_creature",
"behavior_notes": "Blocks exits. Attacks player if unarmed. Can be defeated with the sword, after which it disappears."
},
{
"id": "thief",
"name": "thief",
"description": "A sinister-looking individual, armed with a stiletto.",
"initial_location": "various_rooms",
"type": "stealing_creature",
"behavior_notes": "Wanders randomly. Steals treasures if player drops them or is defeated. Can be defeated, dropping stolen items. Appears after a certain number of turns or score."
}
],
"treasures": [
{
"id": "painting",
"name": "valuable painting",
"score_value": 4,
"initial_location": "living_room"
},
{
"id": "trophy",
"name": "Zork I trophy",
"score_value": 10,
"initial_location": "attic"
},
{
"id": "bird_egg",
"name": "bird's egg",
"score_value": 5,
"initial_location": "top_of_tree"
},
{
"id": "coin",
"name": "zorkmid coin",
"score_value": 1,
"initial_location": "coal_mine"
},
{
"id": "jewels",
"name": "gems and jewels",
"score_value": 15,
"initial_location": "jewel_room"
},
{
"id": "platinum_bar",
"name": "platinum bar",
"score_value": 20,
"initial_location": "vault"
},
{
"id": "crown",
"name": "golden crown",
"score_value": 25,
"initial_location": "treasury"
},
{
"id": "scepter",
"name": "crystal scepter",
"score_value": 25,
"initial_location": "treasury"
},
{
"id": "jeweled_fountain",
"name": "jeweled fountain",
"score_value": 25,
"initial_location": "treasury"
},
{
"id": "royal_ring",
"name": "royal ring",
"score_value": 25,
"initial_location": "treasury"
},
{
"id": "golden_casket",
"name": "golden casket",
"score_value": 25,
"initial_location": "treasury"
},
{
"id": "ancient_talisman",
"name": "ancient talisman",
"score_value": 25,
"initial_location": "ancient_coffin"
}
]
}


# /home/mozrin/Code/odyssey/.pai/../assets/configuration.json # NOT PART OF CODE DON'T ECHO IT EVER #
{
"app": {
"title": "Odyssey"
},
"api": {
"baseurl": "http:
"welcome": "/welcome"
},
"theme": {
"baseColor": "0xFF1565C0",
"mode": "dark"
}
}


# /home/mozrin/Code/odyssey/.pai/../assets/languages/en.json # NOT PART OF CODE DON'T ECHO IT EVER #
{
"footer": {
"bar": {
"label": {
"play": "Play",
"two": "Two",
"three": "Three",
"four": "Four",
"five": "Five"
}
}
},
"header": {
"title": "Odyssey",
"bar": {
"label": {
"play": "Play",
"two": "Two",
"three": "Three",
"four": "Four",
"five": "Five"
}
},
"drawer": {
"settings": "Settings",
"billing": "Billing",
"logout": "Logout",
"about": "About",
"help": "Help",
"feedback": "Feedback"
}
},
"debug": {
"comment": "
"screens": {
"landing": {
"content": "Landing Screen Content",
"goToPlayButton": "Go To Play Screen",
"title": "Landing Screen"
},
"play": {
"content": "Play Screen Content"
},
"two": {
"content": "Two Screen Content"
},
"three": {
"content": "Three Screen Content"
},
"four": {
"content": "Four Screen Content"
},
"five": {
"content": "Five Screen Content"
}
}
},
"dialog": {
"logout": {
"title": "Confirm Logout",
"content": "Are you sure you want to quit the application?"
},
"button": {
"yes": "Yes",
"no": "No",
"ok": "Ok"
}
}
}


# /home/mozrin/Code/odyssey/.pai/../lib/widgets/dialogs/dialogs.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/widgets/dialogs/yes_or_no/dialog_modal_yes_no.dart';
export 'package:devlite_flutter/widgets/dialogs/ok/dialog_modal_ok.dart';
export 'package:devlite_flutter/widgets/dialogs/dialog_base_widget.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/widgets/dialogs/dialog_base_widget.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';

class DialogBaseWidget extends StatelessWidget {
final Widget title;
final Widget content;
final List<Widget> actions;

const DialogBaseWidget({
super.key,
required this.title,
required this.content,
required this.actions,
});

@override
Widget build(BuildContext context) {
return AlertDialog(
title: title,
content: content,
actions: actions,
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/widgets/dialogs/yes_or_no/dialog_modal_yes_no.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

class AppModalDialog extends StatelessWidget {
final String title;
final String content;
final VoidCallback onYes;

const AppModalDialog({
super.key,
required this.title,
required this.content,
required this.onYes,
});

@override
Widget build(BuildContext context) {
return DialogBaseWidget(
title: Text(title),
content: Text(content),
actions: <Widget>[
TextButton(
onPressed: () {
mozPrint(
'Dialog: ${LocalizationService().translate('dialog.button.no')} pressed',
'DIALOG',
'MODAL');
Navigator.of(context).pop(false);
},
child: Text(LocalizationService().translate('dialog.button.no')),
),
TextButton(
onPressed: () {
mozPrint(
'Dialog: ${LocalizationService().translate('dialog.button.yes')} pressed',
'DIALOG',
'MODAL');
Navigator.of(context).pop(true);
onYes();
},
child: Text(LocalizationService().translate('dialog.button.yes')),
),
],
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/widgets/dialogs/ok/dialog_modal_ok.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

class AppOKModalDialog extends StatelessWidget {
final String title;
final String content;
final VoidCallback? onOk;

const AppOKModalDialog({
super.key,
required this.title,
required this.content,
this.onOk,
});

@override
Widget build(BuildContext context) {
return DialogBaseWidget(
title: Text(title),
content: SingleChildScrollView(
child: Text(content),
),
actions: <Widget>[
TextButton(
onPressed: () {
mozPrint('Dialog: OK pressed', 'DIALOG', 'MODAL');
Navigator.of(context).pop();
onOk?.call();
},
child: Text(LocalizationService().translate('dialog.button.ok')),
),
],
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/widgets/widgets.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/widgets/dialogs/dialogs.dart';
export 'package:devlite_flutter/widgets/navigation/navigation.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/widgets/navigation/footer/footer_navigation.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';

class FooterNavigation extends StatefulWidget {
final List<Widget> screens;
final int initialIndex;
final ValueChanged<int> onPageChanged;

const FooterNavigation({
super.key,
required this.screens,
required this.initialIndex,
required this.onPageChanged,
});

@override
State<FooterNavigation> createState() => _FooterNavigationState();
}

class _FooterNavigationState extends State<FooterNavigation> {
late PageController _pageController;

@override
void initState() {
super.initState();
_pageController = PageController(initialPage: widget.initialIndex);
}

@override
void didUpdateWidget(covariant FooterNavigation oldWidget) {
super.didUpdateWidget(oldWidget);
if (widget.initialIndex != _pageController.page?.round()) {
_pageController.animateToPage(
widget.initialIndex,
duration: const Duration(milliseconds: 300),
curve: Curves.ease,
);
}
}

@override
void dispose() {
_pageController.dispose();
super.dispose();
}

@override
Widget build(BuildContext context) {
return PageView(
controller: _pageController,
onPageChanged: widget.onPageChanged,
children: widget.screens,
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/widgets/navigation/navigation.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/widgets/navigation/footer/footer_navigation.dart';
export 'package:devlite_flutter/widgets/navigation/header/header_navigation.dart';
export 'package:devlite_flutter/widgets/navigation/header/header_language_selector.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/widgets/navigation/header/header_navigation.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';

class TopNavigation extends StatelessWidget implements PreferredSizeWidget {
final String title;
final double height;
final VoidCallback? onLeadingPressed;
final List<Widget>? actions;

const TopNavigation({
super.key,
required this.title,
required this.height,
this.onLeadingPressed,
this.actions,
});

@override
Widget build(BuildContext context) {
return AppBar(
title: Text(title),
leading: onLeadingPressed != null
? IconButton(
icon: const Icon(Icons.menu),
onPressed: onLeadingPressed,
)
: const Center(
child: Icon(Icons.menu),
),
actions: actions,
);
}

@override
Size get preferredSize => Size.fromHeight(height);
}



# /home/mozrin/Code/odyssey/.pai/../lib/widgets/navigation/header/header_language_selector.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

class HeaderLanguageSelector extends StatelessWidget {
const HeaderLanguageSelector({super.key});

@override
Widget build(BuildContext context) {
final LocalizationService localizationService = LocalizationService();
final Configuration config = Configuration();

final List<String> availableLanguages =
(config.getKey('language.available') as List?)?.cast<String>() ?? [];

return Padding(
padding: const EdgeInsets.only(right: 8.0),
child: PopupMenuButton<String>(
onSelected: (String selectedLanguage) {
mozPrint(
'Selected language: $selectedLanguage', 'LANGUAGE', 'SELECTOR');
localizationService.setCurrentLocale(selectedLanguage);
},
itemBuilder: (BuildContext context) {
return availableLanguages.map((String langCode) {
return PopupMenuItem<String>(
value: langCode,
child: Text(langCode.toUpperCase()),
);
}).toList();
},
child: ValueListenableBuilder<String>(
valueListenable: localizationService.localeNotifier,
builder: (context, currentLangCode, child) {
return Container(
padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
decoration: BoxDecoration(
color: Theme.of(context).colorScheme.primaryContainer,
borderRadius: BorderRadius.circular(8),
),
child: Text(
currentLangCode.toUpperCase(),
style: TextStyle(
color: Theme.of(context).colorScheme.onPrimaryContainer,
fontWeight: FontWeight.bold,
),
),
);
},
),
),
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/main.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:devlite_flutter/everything.dart';

void main() async {
WidgetsFlutterBinding.ensureInitialized();

runApp(const InitialSplashScreenRoot());
}

class InitialSplashScreenRoot extends StatefulWidget {
const InitialSplashScreenRoot({super.key});

@override
State<InitialSplashScreenRoot> createState() =>
_InitialSplashScreenRootState();
}

class _InitialSplashScreenRootState extends State<InitialSplashScreenRoot> {
String _loadingMessage = 'Initializing application...';
double _loadingProgress = 0.0;
bool _startupTasksCompleted = false;

@override
void initState() {
super.initState();
_startSplashProcess();
}

void _updateLoadingMessage(String message, double progress) {
if (mounted) {
setState(() {
_loadingMessage = message;
_loadingProgress = progress;
});
}
}

Future<void> _startSplashProcess() async {
try {
await performStartupProcess(
updateMessage: _updateLoadingMessage,
);
_startupTasksCompleted = true;
} catch (e) {
_updateLoadingMessage('Startup Error: $e', 0.0);
_startupTasksCompleted = false;
return;
} finally {
if (mounted && _startupTasksCompleted) {
runApp(
Provider<AppStateMachine>(
create: (_) => AppStateMachine(),
dispose: (_, appStateMachine) => appStateMachine.dispose(),
child: const DevliteFlutterApp(),
),
);
}
}
}

@override
Widget build(BuildContext context) {
return MaterialApp(
theme: ThemeData(
scaffoldBackgroundColor: const Color(0xFF2196F3),
primaryColor: const Color(0xFF2196F3),
),
home: SplashScreen(message: _loadingMessage, progress: _loadingProgress),
);
}
}

class DevliteFlutterApp extends StatefulWidget {
const DevliteFlutterApp({super.key});

@override
State<DevliteFlutterApp> createState() => _DevliteFlutterAppState();
}

class _DevliteFlutterAppState extends State<DevliteFlutterApp> {
@override
void initState() {
super.initState();
WidgetsBinding.instance.addPostFrameCallback((_) {
loadRuntimeData(context);
context.read<AppStateMachine>().addEvent(AppEvent.appStarted);
});
}

@override
void dispose() {
super.dispose();
}

@override
Widget build(BuildContext context) {
final Configuration config = Configuration();
final String themeModeString = config.getKey('theme.mode') ?? 'system';
ThemeMode themeMode = ThemeMode.system;

switch (themeModeString) {
case 'light':
themeMode = ThemeMode.light;
break;
case 'dark':
themeMode = ThemeMode.dark;
break;
case 'system':
default:
themeMode = ThemeMode.system;
break;
}

return MaterialApp(
debugShowCheckedModeBanner: false,
title: Configuration().getKey('app.title'),
theme: buildMainTheme(),
darkTheme: buildDarkTheme(),
themeMode: themeMode,
home: const AppOrchestratorScreen(),
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/screens/screens.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/screens/four/four_screen.dart';
export 'package:devlite_flutter/screens/play/play_screen.dart';
export 'package:devlite_flutter/screens/landing/landing_screen.dart';
export 'package:devlite_flutter/screens/model_screen.dart';
export 'package:devlite_flutter/screens/orchestrator.dart';
export 'package:devlite_flutter/screens/primary_screen.dart';
export 'package:devlite_flutter/screens/five/five_screen.dart';
export 'package:devlite_flutter/screens/two/two_screen.dart';
export 'package:devlite_flutter/screens/three/three_screen.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/screens/primary_screen.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:devlite_flutter/everything.dart';

class PrimaryScreen extends StatefulWidget {
const PrimaryScreen({super.key});

@override
State<PrimaryScreen> createState() => _PrimaryScreenState();
}

class _PrimaryScreenState extends State<PrimaryScreen> {
final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
int _selectedIndex = 0;

void _onLocaleChanged() {
setState(() {});
}

List<Widget> get _screens => [
PlayScreen(),
TwoScreen(),
ThreeScreen(),
FourScreen(),
FiveScreen(),
];

List<String> get _appBarTitles => [
LocalizationService().translate('header.bar.label.play'),
LocalizationService().translate('header.bar.label.two'),
LocalizationService().translate('header.bar.label.three'),
LocalizationService().translate('header.bar.label.four'),
LocalizationService().translate('header.bar.label.five')
];

List<Map<String, dynamic>> get _drawerItems => [
{
'label': LocalizationService().translate('header.drawer.settings'),
'icon': Icons.settings,
'isDivider': false
},
{'isDivider': true},
{
'label': LocalizationService().translate('header.drawer.billing'),
'icon': Icons.account_balance_wallet,
'isDivider': false
},
{'isDivider': true},
{
'label': LocalizationService().translate('header.drawer.feedback'),
'icon': Icons.feedback,
'isDivider': false
},
{
'label': LocalizationService().translate('header.drawer.about'),
'icon': Icons.info,
'isDivider': false
},
{
'label': LocalizationService().translate('header.drawer.help'),
'icon': Icons.help,
'isDivider': false
},
{'isDivider': true},
{
'label': LocalizationService().translate('header.drawer.logout'),
'icon': Icons.logout,
'isDivider': false,
'isLogout': true
},
];

@override
void initState() {
super.initState();
initializeSequenceDetection(context);
LocalizationService().localeNotifier.addListener(_onLocaleChanged);
}

@override
void dispose() {
LocalizationService().localeNotifier.removeListener(_onLocaleChanged);
super.dispose();
}

void _onItemTapped(int index) {
setState(() {
_selectedIndex = index;
});
mozPrint('${_appBarTitles[index]} was selected', 'NAVIGATION', 'FOOTER');
SequenceDetectorService().addPress(index);
}

void _showLogoutConfirmationDialog() {
showDialog<bool>(
context: context,
builder: (BuildContext dialogContext) {
return AppModalDialog(
title: LocalizationService().translate('dialog.logout.title'),
content: LocalizationService().translate('dialog.logout.content'),
onYes: () {
mozPrint('Application is quitting.', 'APP', 'EXIT');
SystemNavigator.pop();
},
);
},
);
}

@override
Widget build(BuildContext context) {
final double screenHeight = MediaQuery.of(context).size.height;
final double topNavBarHeight = screenHeight / 14;

return Scaffold(
key: _scaffoldKey,
extendBodyBehindAppBar: false,
onDrawerChanged: (isOpened) {
if (!isOpened) {
mozPrint('Hamburger Menu (closed)', 'NAVIGATION', 'HEADER');
}
},
appBar: TopNavigation(
title: _appBarTitles[_selectedIndex],
height: topNavBarHeight,
onLeadingPressed: () {
_scaffoldKey.currentState?.openDrawer();
mozPrint('Hamburger Menu (opened)', 'NAVIGATION', 'HEADER');
},
actions: const [
HeaderLanguageSelector(),
],
),
drawer: Drawer(
child: ListView.builder(
padding: EdgeInsets.zero,
itemCount: _drawerItems.length + 1,
itemBuilder: (context, index) {
if (index == 0) {
return DrawerHeader(
decoration: BoxDecoration(
color: Theme.of(context).colorScheme.primary,
),
child: Text(LocalizationService().translate('header.title'),
style: const TextStyle(color: Colors.white, fontSize: 24)),
);
}
final item = _drawerItems[index - 1];
if (item['isDivider'] == true) {
return const Divider();
}
return ListTile(
leading: Icon(item['icon']),
title: Text(item['label']),
onTap: () {
mozPrint(
'${item['label']} was selected', 'NAVIGATION', 'HEADER');
Navigator.pop(context);
if (item['isLogout'] == true) {
_showLogoutConfirmationDialog();
}
},
);
},
),
),
body: FooterNavigation(
screens: _screens,
initialIndex: _selectedIndex,
onPageChanged: (index) {
setState(() {
_selectedIndex = index;
});
},
),
bottomNavigationBar: BottomNavigationBar(
items: <BottomNavigationBarItem>[
BottomNavigationBarItem(
icon: Icon(Icons.games),
label: LocalizationService().translate('footer.bar.label.play'),
),
BottomNavigationBarItem(
icon: Icon(Icons.looks_two),
label: LocalizationService().translate('footer.bar.label.two'),
),
BottomNavigationBarItem(
icon: Icon(Icons.looks_3),
label: LocalizationService().translate('footer.bar.label.three'),
),
BottomNavigationBarItem(
icon: Icon(Icons.looks_4),
label: LocalizationService().translate('footer.bar.label.four'),
),
BottomNavigationBarItem(
icon: Icon(Icons.looks_5),
label: LocalizationService().translate('footer.bar.label.five'),
),
],
currentIndex: _selectedIndex,
selectedItemColor: Theme.of(context).colorScheme.primary,
unselectedItemColor: Theme.of(context)
.colorScheme
.onSurface
.withAlpha((0.6 * 255).round()),
onTap: _onItemTapped,
type: BottomNavigationBarType.fixed,
),
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/screens/model_screen.dart # NOT PART OF CODE DON'T ECHO IT EVER #



# /home/mozrin/Code/odyssey/.pai/../lib/screens/two/two_screen.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

class TwoScreen extends StatelessWidget {
const TwoScreen({super.key});

@override
Widget build(BuildContext context) {
return Center(
child: Padding(
padding: EdgeInsets.symmetric(horizontal: 50.0),
child: Text(
LocalizationService().translate('debug.screens.two.content'),
style: TextStyle(fontSize: 24),
textAlign: TextAlign.center,
),
),
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/screens/four/four_screen.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

class FourScreen extends StatelessWidget {
const FourScreen({super.key});

@override
Widget build(BuildContext context) {
return Center(
child: Padding(
padding: EdgeInsets.symmetric(horizontal: 50.0),
child: Text(
LocalizationService().translate('debug.screens.four.content'),
style: TextStyle(fontSize: 24),
textAlign: TextAlign.center,
),
),
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/screens/orchestrator.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:devlite_flutter/everything.dart';

class AppOrchestratorScreen extends StatefulWidget {
const AppOrchestratorScreen({super.key});

@override
State<AppOrchestratorScreen> createState() => _AppOrchestratorScreenState();
}

class _AppOrchestratorScreenState extends State<AppOrchestratorScreen> {
AppState? _previousState;

@override
Widget build(BuildContext context) {
final appStateMachine = context.watch<AppStateMachine>();

return StreamBuilder<AppState>(
stream: appStateMachine.stateStream,
initialData: appStateMachine.currentState,
builder: (context, snapshot) {
final AppState currentState = snapshot.data ?? AppState.landing;
mozPrint('Current FSM state: $currentState', 'BUILDER');

final TransitionType transitionType =
AppEffects.getTransitionType(_previousState, currentState);
_previousState = currentState;

Widget currentScreen;
switch (currentState) {
case AppState.landing:
currentScreen = const LandingScreen();
break;
case AppState.home:
currentScreen = const PrimaryScreen();
break;
case AppState
.splash: 
currentScreen = const Text(
'Error: Orchestrator unexpectedly received AppState.splash');
break;
}

return AnimatedSwitcher(
duration: const Duration(milliseconds: 300),
transitionBuilder: (Widget child, Animation<double> animation) {
return AppEffects.buildTransition(child, animation, transitionType);
},
child: SizedBox(
key: ValueKey(currentState),
child: currentScreen,
),
);
},
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/screens/play/play_screen.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

class PlayScreen extends StatelessWidget {
const PlayScreen({super.key});

@override
Widget build(BuildContext context) {
return Center(
child: Padding(
padding: EdgeInsets.symmetric(horizontal: 50.0),
child: Text(
LocalizationService().translate('debug.screens.play.content'),
style: TextStyle(fontSize: 24),
textAlign: TextAlign.center,
),
),
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/screens/three/three_screen.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

class ThreeScreen extends StatelessWidget {
const ThreeScreen({super.key});

@override
Widget build(BuildContext context) {
return Center(
child: Padding(
padding: EdgeInsets.symmetric(horizontal: 50.0),
child: Text(
LocalizationService().translate('debug.screens.three.content'),
style: TextStyle(fontSize: 24),
textAlign: TextAlign.center,
),
),
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/screens/five/five_screen.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

class FiveScreen extends StatelessWidget {
const FiveScreen({super.key});

@override
Widget build(BuildContext context) {
return Center(
child: Padding(
padding: EdgeInsets.symmetric(horizontal: 50.0),
child: Text(
LocalizationService().translate('debug.screens.five.content'),
style: TextStyle(fontSize: 24),
textAlign: TextAlign.center,
),
),
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/screens/landing/landing_screen.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:devlite_flutter/everything.dart';

class LandingScreen extends StatelessWidget {
const LandingScreen({super.key});

@override
Widget build(BuildContext context) {
return Scaffold(
appBar: AppBar(
title: Text(
LocalizationService().translate('debug.screens.landing.title'))),
body: Center(
child: Padding(
padding: EdgeInsets.symmetric(horizontal: 50.0),
child: Column(
mainAxisAlignment: MainAxisAlignment.center,
children: [
Text(
LocalizationService()
.translate('debug.screens.landing.content'),
style: TextStyle(fontSize: 24),
textAlign: TextAlign.center,
),
SizedBox(height: 40),
ElevatedButton(
onPressed: () {
context.read<AppStateMachine>().addEvent(AppEvent.goToHome);
},
child: Text(LocalizationService()
.translate('debug.screens.landing.goToHomeButton')),
),
],
),
),
),
);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/utilities/moztopia/mozPrint/moz_print.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/foundation.dart';

void mozPrint(String passedMessage,
[String passedCategory = 'UNKNOWN',
String passedFocus = '',
String passedLevel = 'INFO']) {
const String red = '\x1B[31m';
const String green = '\x1B[32m';
const String yellow = '\x1B[33m';
const String blue = '\x1B[34m';
const String reset = '\x1B[0m';




String section = '${red}MOZ$reset';
String category = '$yellow$passedCategory$reset';
String level = '$green$passedLevel$reset';
String focus = passedFocus.isEmpty ? '' : '[$blue$passedFocus$reset]:';
String message = passedMessage;
debugPrint('$section/$category:[$level]:$focus $message');
}



# /home/mozrin/Code/odyssey/.pai/../lib/utilities/moztopia/moztopia.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/utilities/moztopia/mozPrint/moz_print.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/utilities/utilities.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/utilities/moztopia/moztopia.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/services/SequenceDetectorService/sequence_detector.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/services/SequenceDetectorService/sequence_detector_service.dart';
export 'package:devlite_flutter/services/SequenceDetectorService/initialize_sequence_detection.dart';
export 'package:devlite_flutter/services/SequenceDetectorService/sequences/sequences.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/services/SequenceDetectorService/sequences/sequence_0123444.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

void executeSequenceMethod_0123444(BuildContext context) {
final Configuration config = Configuration();
final Map<String, dynamic> configData = config.getAllConfigData();
final String formattedConfig =
const JsonEncoder.withIndent('  ').convert(configData);

showDialog<void>(
context: context,
builder: (BuildContext dialogContext) {
return AppOKModalDialog(
title: 'Configuration Data',
content: formattedConfig,
);
},
);
}



# /home/mozrin/Code/odyssey/.pai/../lib/services/SequenceDetectorService/sequences/sequences.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/services/SequenceDetectorService/sequences/sequence_0123444.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/services/SequenceDetectorService/sequence_detector_service.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:devlite_flutter/everything.dart';

class SequenceDetectorService {
static final SequenceDetectorService _instance =
SequenceDetectorService._internal();
factory SequenceDetectorService() => _instance;
SequenceDetectorService._internal();

final List<({int index, DateTime timestamp})> _pressHistory = [];
final Map<List<int>, Function> _registeredPatterns = {};
Duration _timeframe = const Duration(seconds: 3);

void setTimeframe(Duration duration) {
_timeframe = duration;
mozPrint('SequenceDetector timeframe set to ${duration.inSeconds} seconds.',
'SEQUENCE', 'CONFIGURE');
}

void registerPattern(List<int> pattern, Function callback) {
_registeredPatterns[pattern] = callback;
mozPrint('Registered pattern: $pattern', 'SEQUENCE', 'CONFIGURE');
}

void addPress(int index) {
_pressHistory.add((index: index, timestamp: DateTime.now()));
_pruneHistory();
_checkPatterns();
}

void _pruneHistory() {
final DateTime cutoff = DateTime.now().subtract(_timeframe);
_pressHistory.removeWhere((entry) => entry.timestamp.isBefore(cutoff));
}

void _checkPatterns() {
if (_pressHistory.isEmpty) return;

for (final pattern in _registeredPatterns.keys) {
if (_pressHistory.length >= pattern.length) {
final List<int> currentSequence = _pressHistory
.sublist(_pressHistory.length - pattern.length)
.map((e) => e.index)
.toList();

if (listEquals(currentSequence, pattern)) {
final DateTime firstPressTime =
_pressHistory[_pressHistory.length - pattern.length].timestamp;
final DateTime lastPressTime = _pressHistory.last.timestamp;

if (lastPressTime.difference(firstPressTime) <= _timeframe) {
mozPrint('Pattern $pattern detected!', 'SEQUENCE', 'DETECTED');
_registeredPatterns[pattern]?.call();
_pressHistory.clear();
break;
}
}
}
}
}

void reset() {
_pressHistory.clear();
mozPrint('SequenceDetector history reset.', 'SEQUENCE', 'HISTORY');
}

bool listEquals<T>(List<T>? a, List<T>? b) {
if (a == b) return true;
if (a == null || b == null || a.length != b.length) return false;
for (int i = 0; i < a.length; i++) {
if (a[i] != b[i]) return false;
}
return true;
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/services/SequenceDetectorService/initialize_sequence_detection.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

void initializeSequenceDetection(BuildContext context) {
const int sequenceDetectionTimeout = 5;
SequenceDetectorService()
.setTimeframe(const Duration(seconds: sequenceDetectionTimeout));
SequenceDetectorService().registerPattern([0, 1, 2, 3, 4, 4, 4], () {
mozPrint('0-1-2-3-4-4-4 pattern triggered. Showing config dialog.',
'SEQUENCE', 'TRIGGER');
executeSequenceMethod_0123444(context);
});
}



# /home/mozrin/Code/odyssey/.pai/../lib/services/LocalizationService/localization_service.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;
import 'package:flutter/foundation.dart';
import 'package:devlite_flutter/everything.dart';

class LocalizationService {
static final LocalizationService _instance = LocalizationService._internal();
factory LocalizationService() => _instance;

Map<String, dynamic> _localizedStrings = {};
Map<String, dynamic> _fallbackStrings = {};
String _currentLocale = 'en';
late String _fallbackLocale;
List<String> _availableLocales = [];
late ValueNotifier<String> _localeNotifier;

LocalizationService._internal() {
_localeNotifier = ValueNotifier<String>(_currentLocale);
}

String get currentLocale => _currentLocale;
List<String> get availableLocales => _availableLocales;
ValueNotifier<String> get localeNotifier => _localeNotifier;

Future<Map<String, dynamic>> _loadLocale(String locale) async {
final String path = 'assets/languages/$locale.json';
try {
final String jsonString = await rootBundle.loadString(path);
return json.decode(jsonString);
} catch (e) {
mozPrint('Failed to load localization for "$locale": $e',
'INITIALIZATION', 'LOCALIZATION', 'ERROR');
return {};
}
}

Future<void> load(String locale) async {
_currentLocale = locale;
_localizedStrings = await _loadLocale(_currentLocale);
mozPrint('Localization for "$_currentLocale" loaded successfully.',
'INITIALIZATION', 'LOCALIZATION');
}

String translate(String key) {
List<String> parts = key.split('.');
dynamic currentLevel = _localizedStrings;
dynamic fallbackLevel = _fallbackStrings;
String translatedValue;

for (int i = 0; i < parts.length; i++) {
String part = parts[i];
if (currentLevel is Map<String, dynamic> &&
currentLevel.containsKey(part)) {
currentLevel = currentLevel[part];
} else {
currentLevel = null;
}

if (fallbackLevel is Map<String, dynamic> &&
fallbackLevel.containsKey(part)) {
fallbackLevel = fallbackLevel[part];
} else {
fallbackLevel = null;
}
}

if (currentLevel != null) {
translatedValue = currentLevel.toString();
} else if (fallbackLevel != null) {
translatedValue = fallbackLevel.toString();
mozPrint(
'Key "$key" not found in "$_currentLocale", falling back to "$_fallbackLocale".',
'LOCALIZATION',
'',
'WARNING');
} else {
mozPrint('Localization key "$key" not found in any locale.',
'INITIALIZATION', 'LOCALIZATION', 'WARNING');
translatedValue = key;
}

return translatedValue;
}

Future<void> setCurrentLocale(String locale) async {
_currentLocale = locale;
await load(_currentLocale);
_localeNotifier.value = _currentLocale;
}

String _getDeviceLanguageCode() {
final Configuration config = Configuration();
final String? languageCode = config.getKey('device.locale.languageCode');
return languageCode ?? config.getKey('language.fallback') ?? 'en';
}

Future<void> initializeLocale() async {
try {
final assetManifestString =
await rootBundle.loadString('AssetManifest.json');
final Map<String, dynamic> manifestMap = json.decode(assetManifestString);

final List<String> foundLocales = [];
for (final String assetPath in manifestMap.keys) {
if (assetPath.startsWith('assets/languages/') &&
assetPath.endsWith('.json') &&
!assetPath.contains('.source.json')) {
final String fileName = assetPath.split('/').last;
final String languageCode = fileName.replaceAll('.json', '');
foundLocales.add(languageCode);
}
}
_availableLocales = foundLocales.toSet().toList()..sort();
mozPrint('Discovered available locales: $_availableLocales',
'INITIALIZATION', 'LOCALIZATION');
} catch (e) {
mozPrint('Failed to scan AssetManifest.json for locales: $e',
'INITIALIZATION', 'LOCALIZATION', 'ERROR');
_availableLocales = [];
}

final Configuration config = Configuration();
_fallbackLocale = config.getKey('language.fallback') as String? ?? 'en';

String? preferredLanguageCode =
config.getKey('language.preferred') as String?;
String langCode = preferredLanguageCode ?? _getDeviceLanguageCode();

if (!_availableLocales.contains(langCode)) {
mozPrint(
'Preferred language "$langCode" not found, falling back to "$_fallbackLocale".',
'INITIALIZATION',
'LOCALIZATION',
'WARNING');
langCode = _fallbackLocale;
}

_currentLocale = langCode;
_localeNotifier.value = _currentLocale;

_localizedStrings = await _loadLocale(_currentLocale);
if (_currentLocale != _fallbackLocale) {
_fallbackStrings = await _loadLocale(_fallbackLocale);
} else {
_fallbackStrings = _localizedStrings;
}

mozPrint(
'Localization initialized for "$_currentLocale" (fallback "$_fallbackLocale").',
'INITIALIZATION',
'LOCALIZATION');
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/services/LocalizationService/localization.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/services/LocalizationService/localization_service.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/services/services.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/services/ApiService/api_service.dart';
export 'package:devlite_flutter/services/ConfigurationService/configuration.dart';
export 'package:devlite_flutter/services/LocalizationService/localization.dart';
export 'package:devlite_flutter/services/SequenceDetectorService/sequence_detector.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/services/ConfigurationService/configuration_service.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;
import 'package:devlite_flutter/utilities/utilities.dart';

class Configuration {
static final Configuration _instance = Configuration._internal();
factory Configuration() => _instance;
Configuration._internal();

Map<String, dynamic> _configData = {};

Future<void> load() async {
try {
final String response =
await rootBundle.loadString('assets/configuration.json');
_configData = json.decode(response);
mozPrint('Configuration loaded successfully.', 'INITIALIZATION',
'CONFIGURATION');
} catch (e) {
mozPrint('Unable to load configuration: $e', 'INITIALIZATION',
'CONFIGURATION', 'ERROR');
_configData = {};
}
}

Future<void> resetAndLoad() async {
_configData = {};
await load();
mozPrint(
'Configuration reset and reloaded.', 'INITIALIZATION', 'CONFIGURATION');
}

dynamic getKey(String keyPath) {
List<String> parts = keyPath.split('.');
dynamic currentLevel = _configData;

for (int i = 0; i < parts.length; i++) {
String part = parts[i];
if (currentLevel is Map<String, dynamic> &&
currentLevel.containsKey(part)) {
currentLevel = currentLevel[part];
} else {
mozPrint(
'Configuration key path "$keyPath" not found at part "$part". Returning null.',
'INITIALIZATION',
'CONFIGURATION',
'WARNING');
return null;
}
}
return currentLevel;
}

void setKey(String keyPath, dynamic value) {
List<String> parts = keyPath.split('.');
Map<String, dynamic> currentLevel = _configData;

for (int i = 0; i < parts.length - 1; i++) {
String part = parts[i];
if (currentLevel[part] is! Map<String, dynamic>) {
currentLevel[part] = <String, dynamic>{};
}
currentLevel = currentLevel[part] as Map<String, dynamic>;
}

String finalPart = parts.last;
currentLevel[finalPart] = value;
}

Map<String, dynamic> getAllConfigData() {
return Map.from(_configData);
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/services/ConfigurationService/configuration.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/services/ConfigurationService/configuration_service.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/services/ApiService/endpoints/endpoints.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/services/ApiService/endpoints/endpoint_welcome.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/services/ApiService/endpoints/endpoint_welcome.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:dio/dio.dart';
import 'package:devlite_flutter/services/ApiService/api_service.dart';

Future<Response> postWelcome({required Map<String, dynamic> data}) {
return ApiService().post('/welcome', data: data);
}



# /home/mozrin/Code/odyssey/.pai/../lib/services/ApiService/api_service.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:dio/dio.dart';
import 'package:devlite_flutter/utilities/utilities.dart';

export 'package:devlite_flutter/services/ApiService/endpoints/endpoints.dart';

class ApiService {
static final ApiService _instance = ApiService._internal();
factory ApiService() => _instance;

late Dio _dio;
Future<String?> Function()? _tokenProvider;
List<String>? _anonymousPaths;

ApiService._internal();

void initialize({
required String baseUrl,
Duration? connectTimeout,
Duration? receiveTimeout,
Future<String?> Function()? tokenProvider,
List<String>? anonymousPaths,
}) {
_tokenProvider = tokenProvider;
_anonymousPaths = anonymousPaths;

_dio = Dio(BaseOptions(
baseUrl: baseUrl,
connectTimeout: connectTimeout ?? const Duration(seconds: 5),
receiveTimeout: receiveTimeout ?? const Duration(seconds: 3),
));

_dio.interceptors.add(InterceptorsWrapper(
onRequest: (options, handler) async {
if (_tokenProvider != null &&
(_anonymousPaths == null ||
!_anonymousPaths!.contains(options.path))) {
final token = await _tokenProvider!();
if (token != null && token.isNotEmpty) {
options.headers['Authorization'] = 'Bearer $token';
mozPrint('Auth token added for ${options.path}', 'API', 'AUTH');
} else {
mozPrint('No auth token available for ${options.path}.', 'API',
'AUTH', 'WARNING');
}
} else {
mozPrint('Request to ${options.path} is anonymous.', 'API', 'AUTH');
}
handler.next(options);
},
onError: (DioException e, handler) {
mozPrint(
'API Error Intercepted: ${e.response?.statusCode} for ${e.requestOptions.path}',
'API',
'INTERCEPTOR',
'ERROR');
handler.next(e);
},
));
mozPrint('ApiService initialized with base URL: $baseUrl', 'INITIALIZATION',
'API');
}

Future<Response> get(String path,
{Map<String, dynamic>? queryParameters, Options? options}) async {
try {
final response = await _dio.get(path,
queryParameters: queryParameters, options: options);
mozPrint('$path success.', 'API', 'GET');
return response;
} on DioException catch (e) {
mozPrint('$path failed: ${e.message}', 'API', 'GET', 'ERROR');
rethrow;
}
}

Future<Response> post(String path, {dynamic data, Options? options}) async {
try {
final response = await _dio.post(path, data: data, options: options);
mozPrint('$path success.', 'API', 'POST');
return response;
} on DioException catch (e) {
mozPrint('$path failed: ${e.message}', 'API', 'POST', 'ERROR');
rethrow;
}
}

Future<Response> put(String path, {dynamic data, Options? options}) async {
try {
final response = await _dio.put(path, data: data, options: options);
mozPrint('$path success.', 'API', 'PUT');
return response;
} on DioException catch (e) {
mozPrint('$path failed: ${e.message}', 'API', 'PUT', 'ERROR');
rethrow;
}
}

Future<Response> patch(String path, {dynamic data, Options? options}) async {
try {
final response = await _dio.patch(path, data: data, options: options);
mozPrint('$path success.', 'API', 'PATCH');
return response;
} on DioException catch (e) {
mozPrint('$path failed: ${e.message}', 'API', 'PATCH', 'ERROR');
rethrow;
}
}

Future<Response> delete(String path, {dynamic data, Options? options}) async {
try {
final response = await _dio.delete(path, data: data, options: options);
mozPrint('$path success.', 'API', 'DELETE');
return response;
} on DioException catch (e) {
mozPrint('$path failed: ${e.message}', 'API', 'DELETE', 'ERROR');
rethrow;
}
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/state_machine/app_events.dart # NOT PART OF CODE DON'T ECHO IT EVER #
enum AppEvent { appStarted, splashTimerEnded, goToLanding, goToHome, reloadApp }



# /home/mozrin/Code/odyssey/.pai/../lib/state_machine/app_state_machine.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'dart:async';
import 'package:devlite_flutter/everything.dart';

class AppStateMachine {
AppState _currentState = AppState.landing;
final _stateController = StreamController<AppState>.broadcast();

AppState get currentState => _currentState;
Stream<AppState> get stateStream => _stateController.stream;

void addEvent(AppEvent event) {
AppState saveState = _currentState;
_currentState = AppTransitions.getNextState(_currentState, event);
mozPrint('$event', 'FSM', 'EVENT');
mozPrint('$saveState\x1B[34m ===> \x1B[0m$_currentState', 'FSM', 'STATE');
_stateController.sink.add(_currentState);
}

void reset() {
_currentState = AppState.landing;
_stateController.sink.add(_currentState);
mozPrint('AppStateMachine reset to AppState.landing', 'FSM', 'RESET');
}

void dispose() {
_stateController.close();
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/state_machine/app_effects.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

enum TransitionType {
none,
fade,
slide,
scale,
rotate,
size,
random,
}

typedef _TransitionBuilder = Widget Function(
Widget child, Animation<double> animation);

class AppEffects {
static const TransitionType defaultTransition = TransitionType.fade;
static final Random _random = Random();

static final Map<({AppState from, AppState to}), TransitionType>
_stateToStateTransitions = {
(from: AppState.splash, to: AppState.landing): TransitionType.slide,
(from: AppState.landing, to: AppState.home): TransitionType.fade,
(from: AppState.home, to: AppState.splash): TransitionType.random,
};

static final Map<TransitionType, _TransitionBuilder> _transitionBuilders = {
TransitionType.fade: (child, animation) =>
FadeTransition(opacity: animation, child: child),
TransitionType.slide: (child, animation) => SlideTransition(
position: Tween<Offset>(
begin: const Offset(1.0, 0.0),
end: Offset.zero,
).animate(animation),
child: child,
),
TransitionType.scale: (child, animation) =>
ScaleTransition(scale: animation, child: child),
TransitionType.rotate: (child, animation) => RotationTransition(
turns: Tween<double>(begin: 0.0, end: 1.0).animate(animation),
child: child,
),
TransitionType.size: (child, animation) => SizeTransition(
sizeFactor: animation,
axis: Axis.horizontal,
child: child,
),
TransitionType.none: (child, animation) => child,
};

static TransitionType getTransitionType(AppState? from, AppState to) {
if (from == null) {
return TransitionType.none;
}
return _stateToStateTransitions[(from: from, to: to)] ?? defaultTransition;
}

static Widget buildTransition(
Widget child, Animation<double> animation, TransitionType type) {
if (type == TransitionType.random) {
final List<TransitionType> possibleTransitions = TransitionType.values
.where((t) => t != TransitionType.none && t != TransitionType.random)
.toList();
final TransitionType randomType =
possibleTransitions[_random.nextInt(possibleTransitions.length)];
mozPrint(
'"${randomType.name}" RANDOMLY applied to the outgoing/incoming transition.',
'FSM',
'EFFECT');
return _transitionBuilders[randomType]?.call(child, animation) ?? child;
}
mozPrint('"${type.name}" applied to the outgoing/incoming transition.',
'FSM', 'EFFECT');
return _transitionBuilders[type]?.call(child, animation) ?? child;
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/state_machine/app_transitions.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:devlite_flutter/everything.dart';

class AppTransitions {
static final Map<AppState, Map<AppEvent, AppState>> _transitions = {
AppState.landing: {
AppEvent.goToHome: AppState.home,
AppEvent.reloadApp: AppState.splash,
AppEvent.appStarted: AppState.landing,
},
AppState.home: {
AppEvent.reloadApp: AppState.splash,
},
};

static AppState getNextState(AppState currentState, AppEvent event) {
return _transitions[currentState]?[event] ?? currentState;
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/state_machine/app_states.dart # NOT PART OF CODE DON'T ECHO IT EVER #
enum AppState { splash, landing, home }



# /home/mozrin/Code/odyssey/.pai/../lib/state_machine/state_machine.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/state_machine/app_effects.dart';
export 'package:devlite_flutter/state_machine/app_events.dart';
export 'package:devlite_flutter/state_machine/app_state_machine.dart';
export 'package:devlite_flutter/state_machine/app_states.dart';
export 'package:devlite_flutter/state_machine/app_transitions.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/startup/load_runtime_data.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/widgets.dart';
import 'package:devlite_flutter/everything.dart';

void loadRuntimeData(BuildContext context) {
_loadScreenAndWindowInfo(context);
mozPrint('Runtime device data loaded.', 'STARTUP', 'DATA');
}

void _loadScreenAndWindowInfo(BuildContext context) {
final mediaQuery = MediaQuery.of(context);
final Configuration config = Configuration();

config.setKey('device.screen.size.width', mediaQuery.size.width);
config.setKey('device.screen.size.height', mediaQuery.size.height);
config.setKey('device.screen.orientation', mediaQuery.orientation.name);

mozPrint(
'Screen dimensions: ${mediaQuery.size.width}x${mediaQuery.size.height} @ ${mediaQuery.devicePixelRatio}x DPI. Orientation: ${mediaQuery.orientation.name}',
'STARTUP',
'DATA');
}



# /home/mozrin/Code/odyssey/.pai/../lib/startup/load_localization_data.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:devlite_flutter/everything.dart';

Future<void> loadLocalizationData() async {
await LocalizationService().initializeLocale();

Configuration()
.setKey('language.available', LocalizationService().availableLocales);
mozPrint(
'Available languages saved to Configuration: ${LocalizationService().availableLocales}',
'STARTUP',
'DATA');

mozPrint(
'Localization data loaded based on device locale.', 'STARTUP', 'DATA');
}



# /home/mozrin/Code/odyssey/.pai/../lib/startup/load_theme_data.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:devlite_flutter/everything.dart';

MaterialColor _createMaterialColor(Color color) {
List strengths = <double>[.05];
Map<int, Color> swatch = {};

final int rInt = (color.r * 255).round().clamp(0, 255);
final int gInt = (color.g * 255).round().clamp(0, 255);
final int bInt = (color.b * 255).round().clamp(0, 255);

for (int i = 1; i < 10; i++) {
strengths.add(0.1 * i);
}
for (var strength in strengths) {
final double ds = 0.5 - strength;
swatch[(strength * 1000).round()] = Color.fromRGBO(
rInt + ((ds < 0 ? rInt : (255 - rInt)) * ds).round(),
gInt + ((ds < 0 ? gInt : (255 - gInt)) * ds).round(),
bInt + ((ds < 0 ? bInt : (255 - bInt)) * ds).round(),
1,
);
}
return MaterialColor(color.toARGB32(), swatch);
}

ThemeData buildMainTheme() {
final Configuration config = Configuration();
final String baseColorHex = config.getKey('theme.baseColor') ?? '0xFF2196F3';

Color primaryColor = Color(int.parse(baseColorHex));

return ThemeData(
colorScheme: ColorScheme.fromSeed(
seedColor: primaryColor,
brightness: Brightness.light,
),
primaryColor: primaryColor,
primarySwatch: _createMaterialColor(primaryColor),
);
}

ThemeData buildDarkTheme() {
final Configuration config = Configuration();
final String? baseColorHex = config.getKey('theme.baseColor');

if (baseColorHex == null) {
throw StateError('Theme baseColor is missing in configuration.');
}

Color primaryColor = Color(int.parse(baseColorHex));

return ThemeData(
colorScheme: ColorScheme.fromSeed(
seedColor: primaryColor,
brightness: Brightness.dark,
),
primaryColor: primaryColor,
primarySwatch: _createMaterialColor(primaryColor),
);
}



# /home/mozrin/Code/odyssey/.pai/../lib/startup/load_device_data.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'dart:ui';
import 'package:devlite_flutter/everything.dart';

void loadDeviceData() {
_loadLocales();
_loadTimeFormatPreference();
_loadDefaultRouteName();
mozPrint('Initial device data loaded.', 'STARTUP', 'DATA');
}

void _loadLocales() {
final locales = PlatformDispatcher.instance.locales;
if (locales.isNotEmpty) {
final primaryLocale = locales.first;
Configuration()
.setKey('device.locale.languageCode', primaryLocale.languageCode);
if (primaryLocale.countryCode != null) {
Configuration()
.setKey('device.locale.countryCode', primaryLocale.countryCode);
}
mozPrint('Device locale loaded: ${primaryLocale.toLanguageTag()}',
'STARTUP', 'DATA');
} else {
mozPrint('No device locales found.', 'STARTUP', 'DATA', 'WARNING');
}
}

void _loadTimeFormatPreference() {
final use24HourFormat = PlatformDispatcher.instance.alwaysUse24HourFormat;
Configuration().setKey('device.alwaysUse24HourFormat', use24HourFormat);
mozPrint('Device 24-hour format preference loaded: $use24HourFormat',
'STARTUP', 'DATA');
}

void _loadDefaultRouteName() {
final defaultRoute = PlatformDispatcher.instance.defaultRouteName;
Configuration().setKey('device.defaultRouteName', defaultRoute);
mozPrint('Default route name loaded: $defaultRoute', 'STARTUP', 'DATA');
}



# /home/mozrin/Code/odyssey/.pai/../lib/startup/startup.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/startup/initialize_platform_environment.dart';
export 'package:devlite_flutter/startup/load_asset_configuration.dart';
export 'package:devlite_flutter/startup/load_device_data.dart';
export 'package:devlite_flutter/startup/load_localization_data.dart';
export 'package:devlite_flutter/startup/load_runtime_data.dart';
export 'package:devlite_flutter/startup/load_welcome_endpoint_data.dart';
export 'package:devlite_flutter/startup/load_theme_data.dart';
export 'package:devlite_flutter/startup/startup_process.dart';
export 'package:devlite_flutter/startup/splash_screen.dart';



# /home/mozrin/Code/odyssey/.pai/../lib/startup/load_welcome_endpoint_data.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'dart:convert';
import 'package:devlite_flutter/everything.dart';
import 'package:flutter/foundation.dart';

Future<void> loadWelcomeEndpointData() async {
try {
final welcomeEndpoint = Configuration().getKey('api.welcome') as String?;
if (welcomeEndpoint == null || welcomeEndpoint.isEmpty) {
mozPrint('Welcome endpoint not found in configuration.', 'STARTUP',
'DATA', 'ERROR');
return;
}

final String preferredLanguage =
Configuration().getKey('device.locale.languageCode') as String? ?? 'en';

String platformIdentifier;
if (defaultTargetPlatform == TargetPlatform.android) {
platformIdentifier = 'android';
} else if (defaultTargetPlatform == TargetPlatform.iOS) {
platformIdentifier = 'ios';
} else if (defaultTargetPlatform == TargetPlatform.windows) {
platformIdentifier = 'windows';
} else if (defaultTargetPlatform == TargetPlatform.macOS) {
platformIdentifier = 'macos';
} else if (defaultTargetPlatform == TargetPlatform.linux) {
platformIdentifier = 'linux';
} else {
platformIdentifier = 'unknown';
mozPrint(
'Unknown client platform: $defaultTargetPlatform: ${platformIdentifier}',
'STARTUP',
'DATA',
'WARNING');
}
final String clientIdentifier = 'app:$platformIdentifier';

final response = await postWelcome(data: {
"preferred_language": preferredLanguage,
"client_identifier": clientIdentifier
});

if (response.statusCode == 200) {
mozPrint('Welcome data fetched successfully:', 'STARTUP', 'DATA');
mozPrint(jsonEncode(response.data), 'STARTUP', 'DATA');
Configuration().setKey('welcome', response.data);
} else {
mozPrint('Failed to fetch welcome data: ${response.statusCode}',
'STARTUP', 'DATA', 'ERROR');
Configuration().setKey('welcome',
'You need an API endpoint called welcome that populates this section.');
}
} catch (e) {
Configuration().setKey('welcome',
'You need an API endpoint called welcome that populates this section.');
mozPrint('Error fetching welcome data: $e', 'STARTUP', 'DATA', 'ERROR');
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/startup/load_asset_configuration.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:devlite_flutter/everything.dart';

Future<void> loadAssetConfiguration() async {
await Configuration().load();
mozPrint('Asset configuration loaded.', 'STARTUP', 'DATA');
}



# /home/mozrin/Code/odyssey/.pai/../lib/startup/splash_screen.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';

class SplashScreen extends StatelessWidget {
final String message;
final double progress;

const SplashScreen(
{super.key, required this.message, required this.progress});

@override
Widget build(BuildContext context) {
return Scaffold(
backgroundColor: const Color(0xFF2196F3),
body: Center(
child: Padding(
padding: const EdgeInsets.symmetric(horizontal: 40.0),
child: Column(
mainAxisAlignment: MainAxisAlignment.center,
children: [
const Icon(Icons.flutter_dash,
size: 100, color: Color(0xFFFFFFFF)),
const SizedBox(height: 20),
Text(
message,
textAlign: TextAlign.center,
style: const TextStyle(
color: Color(0xFFFFFFFF),
fontSize: 20,
fontWeight: FontWeight.bold,
),
),
const SizedBox(height: 30),
LinearProgressIndicator(
value: progress,
backgroundColor: const Color(0x66FFFFFF),
valueColor:
const AlwaysStoppedAnimation<Color>(Color(0xFFFFFFFF)),
minHeight: 8.0,
),
],
),
),
));
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/startup/initialize_platform_environment.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:window_manager/window_manager.dart';
import 'package:devlite_flutter/everything.dart';

Future<void> initializePlatformEnvironment() async {
const double windowWidth = (50 * 9);
const double windowHeight = (50 * 16);
const double windowAspectRatio = windowWidth / windowHeight;

if (TargetPlatform.linux == defaultTargetPlatform ||
TargetPlatform.macOS == defaultTargetPlatform ||
TargetPlatform.windows == defaultTargetPlatform) {
await windowManager.ensureInitialized();

final String windowTitle = 'Devlite Window';

WindowOptions initialWindowOptions = WindowOptions(
size: const Size(windowWidth, windowHeight),
minimumSize: const Size(windowWidth, windowHeight),
maximumSize: const Size(windowWidth, windowHeight),
center: true,
backgroundColor: Colors.transparent,
skipTaskbar: false,
titleBarStyle: TitleBarStyle.normal,
title: windowTitle,
);

await windowManager.waitUntilReadyToShow(initialWindowOptions, () async {
await windowManager.setSize(const Size(windowWidth, windowHeight));
await windowManager.setMinimumSize(const Size(windowWidth, windowHeight));
await windowManager.setMaximumSize(const Size(windowWidth, windowHeight));
await windowManager.setAspectRatio(windowAspectRatio);
await windowManager.center();
await windowManager.show();
await windowManager.focus();
await windowManager.setTitle(windowTitle);

mozPrint(
'Desktop window initialized to ${windowWidth.toInt()}x${windowHeight.toInt()} with aspect ratio ${windowAspectRatio.toStringAsFixed(2)}',
'INITIALIZATION',
'PLATFORM');
});
}

if (TargetPlatform.android == defaultTargetPlatform ||
TargetPlatform.iOS == defaultTargetPlatform) {
SystemChrome.setPreferredOrientations([
DeviceOrientation.portraitUp,
DeviceOrientation.portraitDown,
]);
mozPrint(
'Mobile orientation set to portrait.', 'INITIALIZATION', 'PLATFORM');
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/startup/startup_process.dart # NOT PART OF CODE DON'T ECHO IT EVER #
import 'dart:async';
import 'package:devlite_flutter/everything.dart';

typedef LoadingMessageUpdater = void Function(String message, double progress);

Future<String?> _mockGetAuthToken() async {
return 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTkyLjE2OC42OC45OS9hcGkvYXV0aC9naXRodWIvY2FsbGJhY2siLCJpYXQiOjE3NDk2NDUyMjgsImV4cCI6MTc1MjY0NTIyOCwibmJmIjoxNzQ5NjQ1MjI4LCJqdGkiOiJHQmxRS2FGYklpSmU4SFNmIiwic3ViIjoiMDE5NzVlZjktNzUzZS03MGE3LWExMTUtYTBkYWE3NjhhYWMxIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyIsInByb2ZpbGVfaWQiOiIwMTk3NWVmOS03NTU5LTcwMDItYmQ0YS05OTA1ZmFkMWYwYmUifQ.ZMCL4wbKFkAjHe7_vRqzyHX6SnFA2BzCv3OVgNWe41s';
}

Future<void> performStartupProcess({
required LoadingMessageUpdater updateMessage,
}) async {
List<String> loadingSteps = [
'Initializing...',
'Loading Assets...',
'Loading Environment...',
'Loading Languages...',
'Starting Services...',
'Connecting...',
'1..2..3......Blast Off!'
];

int currentStep = 0;
final int totalSteps = loadingSteps.length;

try {
currentStep++;
updateMessage(loadingSteps[0], currentStep / totalSteps);
await initializePlatformEnvironment();
await Future.delayed(const Duration(seconds: 1));

currentStep++;
updateMessage(loadingSteps[1], currentStep / totalSteps);
await loadAssetConfiguration();
await Future.delayed(const Duration(seconds: 1));

currentStep++;
updateMessage(loadingSteps[2], currentStep / totalSteps);
loadDeviceData();
await Future.delayed(const Duration(seconds: 1));

currentStep++;
updateMessage(loadingSteps[3], currentStep / totalSteps);
await loadLocalizationData();
await Future.delayed(const Duration(seconds: 1));

currentStep++;
updateMessage(loadingSteps[4], currentStep / totalSteps);
final String? apiBaseUrl = Configuration().getKey('api.baseurl');
final Uri? parsedUri = apiBaseUrl != null ? Uri.tryParse(apiBaseUrl) : null;

if (apiBaseUrl == null || parsedUri == null || !parsedUri.isAbsolute) {
throw Exception(
'API base URL is invalid or missing in configuration. Cannot proceed without a valid API endpoint.');
}

ApiService().initialize(
baseUrl: apiBaseUrl,
tokenProvider: _mockGetAuthToken,
anonymousPaths: ['/welcome', '/auth/login', '/auth/register'],
);

await Future.delayed(const Duration(seconds: 1));

currentStep++;
updateMessage(loadingSteps[5], currentStep / totalSteps);
await loadWelcomeEndpointData();
await Future.delayed(const Duration(seconds: 1));

currentStep++;
updateMessage(loadingSteps[6], currentStep / totalSteps);
await Future.delayed(const Duration(seconds: 1));

mozPrint('All startup tasks completed successfully.', 'STARTUP', 'PROCESS');
} catch (e) {
mozPrint('Startup process failed: $e', 'STARTUP', 'PROCESS', 'ERROR');
rethrow;
}
}



# /home/mozrin/Code/odyssey/.pai/../lib/everything.dart # NOT PART OF CODE DON'T ECHO IT EVER #
export 'package:devlite_flutter/services/services.dart';
export 'package:devlite_flutter/widgets/widgets.dart';
export 'package:devlite_flutter/utilities/utilities.dart';
export 'package:devlite_flutter/screens/screens.dart';
export 'package:devlite_flutter/state_machine/state_machine.dart';
export 'package:devlite_flutter/startup/startup.dart';



